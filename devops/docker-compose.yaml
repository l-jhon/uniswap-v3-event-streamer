version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command:
      - '--kafka.server=kafka:9092'
      - '--web.listen-address=:9308'
      - '--web.telemetry-path=/metrics'
    ports:
      - "9308:9308"
    restart: on-failure
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./grafana-dashboards/dashboards:/etc/grafana/provisioning/dashboards/dashboards
      - ./grafana-dashboards/datasources:/etc/grafana/provisioning/datasources
      - ./grafana-dashboards/provisioning/providers.yml:/etc/grafana/provisioning/dashboards/providers.yml

  events-producer:
    build:
      context: ..
      dockerfile: devops/Dockerfile
    env_file:
      - ../.env
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
    container_name: events-producer
    ports:
      - "8000:8000"
    volumes:
      - ../checkpoints:/app/checkpoints:rw
    depends_on:
      - kafka
      - postgres
    command: ["python", "main.py", "--mode", "producer", "--event", "all"]

  events-consumer:
    build:
      context: ..
      dockerfile: devops/Dockerfile
    env_file:
      - ../.env
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - POSTGRES_HOST=postgres
    container_name: events-consumer
    depends_on:
      - kafka
    command: ["python", "main.py", "--mode", "consumer"]

volumes:
  pgdata:
